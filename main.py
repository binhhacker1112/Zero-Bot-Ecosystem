import discord
from discord.ext import commands, tasks
import random
import json
import os
from datetime import datetime, timedelta
import dotenv 
import time
import csv
from server_logger import get_logger

# --- Config ---
dotenv.load_dotenv()
TOKEN = os.getenv("BOT_DISCORD_TOKEN")  # Thay b·∫±ng token th·∫≠t khi ch·∫°y
PREFIXES = ['!zero ', '!z ']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, 'users.json')
FOXCOIN_PRICE = os.path.join(BASE_DIR, 'foxcoin_price.csv')
MAX_FOXCOIN = 21000000000
DAILY_AMOUNT = 500
PETS_PRICE = os.path.join(BASE_DIR, 'pets_price.json')

# --- Helper Functions ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_data(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {'balance': 1000, 'last_daily': None, 'foxcoin': 0, 'pets': []}
        save_data(data)
    return data[str(user_id)]

def update_user_data(user_id, user_data):
    data = load_data()
    data[str(user_id)] = user_data
    save_data(data)

def save_foxcoin_price(price):
    with open(FOXCOIN_PRICE, 'a', newline='') as f:
        writer = csv.writer(f)
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M')
        writer.writerow([timestamp, price])

def get_foxcoin_price():
    with open(FOXCOIN_PRICE, 'r', newline='') as f:
        rows = list(csv.reader(f))
        if len(rows) == 1:
            return 10.0
        row_now = rows[-1]
        return float(row_now[1])
    
def get_total_supply():
    data = load_data()
    return sum(user['foxcoin'] for user in data.values())

def get_pet_price(pet_name):
    if not os.path.exists(PETS_PRICE):
        return {}
    with open(PETS_PRICE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return data.get(pet_name)

def get_pet_list():
    if not os.path.exists(PETS_PRICE):
        return {}
    with open(PETS_PRICE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return data.keys()

# --- Bot Setup ---
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix=commands.when_mentioned_or(*PREFIXES), intents=intents)
bot.remove_command('help')

# --- Key Words ---

balance_commands = ('balance', 'bl', 'money', 'cash', 'sodu', 'tien')
daily_commands = ('daily', 'dl', 'dail', 'dai', 'diemdanh')
coin_flip_commands = ('coinflip', 'cf')
blackjack_commands = ('blackjack', 'bj', 'xidach')
love_commands = ('love', 'couple', 'ghepdoi', 'otp', 'ship', 'daythuyen')
foxcoin_commands = ('foxcoin', 'fxc')
leaderboard_commands = ('leaderboard', 'ldb', 'bxh')
spin_commands = ('spin', 's', 'sp')
shop_commands = ('shop', 'store', 'cuahang')
work_commands = ('work', 'lamviec', 'lv')

# --- Economy Commands ---
@bot.command(name='balance', aliases = balance_commands[1:])
async def balance(ctx):
    user_data = get_user_data(ctx.author.id)
    await ctx.send(f"üí∞ {ctx.author.mention} S·ªë d∆∞ hi·ªán t·∫°i: **{user_data['balance']:,.2f}**")

@bot.command(name='daily', aliases = daily_commands[1:])
async def daily(ctx):
    user_data = get_user_data(ctx.author.id)
    now = datetime.utcnow()
    last_daily = user_data.get('last_daily')
    if last_daily:
        last_daily = datetime.fromisoformat(last_daily)
        if now - last_daily < timedelta(hours=24):
            remain = timedelta(hours=24) - (now - last_daily)
            await ctx.send(f"‚è≥ B·∫°n ƒë√£ nh·∫≠n daily r·ªìi. Th·ª≠ l·∫°i sau {remain.seconds//3600}h{(remain.seconds//60)%60}p.")
            return
    user_data['balance'] += DAILY_AMOUNT
    user_data['last_daily'] = now.isoformat()
    update_user_data(ctx.author.id, user_data)
    await ctx.send(f"üéÅ {ctx.author.mention} nh·∫≠n {DAILY_AMOUNT} xu m·ªói ng√†y! S·ªë d∆∞ m·ªõi: **{user_data['balance']:.2f}**")

# --- Coinflip Command ---
@bot.command(name='coinflip', aliases = coin_flip_commands[1:])
async def coinflip(ctx, choice: str = None, amount: str = None):
    if choice not in ['heads', 'tails'] or amount is None:
        await ctx.send('C√∫ ph√°p: `!zero coinflip heads/tails <s·ªë ti·ªÅn>`')
        return
    user_data = get_user_data(ctx.author.id)
    if amount.isdigit():
        amount = int(amount)
    else:
        if amount not in ['all']:
            await ctx.send('C√∫ ph√°p: `!zero coinflip heads/tails <s·ªë ti·ªÅn>`')
            return
        amount = user_data['balance']
    if amount <= 0 or amount > user_data['balance']:
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë d∆∞!')
        return
    result = random.choice(['heads', 'tails'])
    win = (choice == result)
    if win:
        user_data['balance'] += amount
        msg = f"üéâ {ctx.author.mention} th·∫Øng! K·∫øt qu·∫£: **{result}**. Nh·∫≠n {amount:,.2f} xu."
    else:
        user_data['balance'] -= amount
        msg = f"üò¢ {ctx.author.mention} thua! K·∫øt qu·∫£: **{result}**. M·∫•t {amount:,.2f} xu."
    update_user_data(ctx.author.id, user_data)
    await ctx.send(msg + f" S·ªë d∆∞: **{user_data['balance']:,.2f}**")

# --- Blackjack Game ---
SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
CARD_VALUES = {str(i): i for i in range(2, 11)}
CARD_VALUES.update({'J': 10, 'Q': 10, 'K': 10, 'A': 11})

def draw_card(deck):
    return deck.pop(random.randint(0, len(deck)-1))

def hand_value(hand):
    value = sum(CARD_VALUES[card[0]] for card in hand)
    # Adjust for Aces
    aces = sum(1 for card in hand if card[0] == 'A')
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

active_blackjack = {}

@bot.command(name='blackjack', aliases = blackjack_commands[1:])
async def blackjack(ctx, amount: str = None):
    if amount.isdigit():
        amount = int(amount)
        if amount is None or amount <= 0:
            await ctx.send('C√∫ ph√°p: `!zero blackjack <s·ªë ti·ªÅn>`')
            return
        user_data = get_user_data(ctx.author.id)
        if amount > user_data['balance']:
            await ctx.send('S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i!')
            return
        if ctx.author.id in active_blackjack:
            await ctx.send('B·∫°n ƒëang c√≥ v√°n blackjack ch∆∞a k·∫øt th√∫c!')
            return
    else:
        if amount == 'all':
            user_data = get_user_data(ctx.author.id)
            if user_data['balance'] == 0:
                await ctx.send('S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i!')
                return
            amount = user_data['balance']
        else:
            await ctx.send('S·ªë ti·ªÅn b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá!')
            return
    # Setup game
    deck = [(rank, suit) for suit in SUITS for rank in RANKS]
    random.shuffle(deck)
    player = [draw_card(deck), draw_card(deck)]
    dealer = [draw_card(deck), draw_card(deck)]
    active_blackjack[ctx.author.id] = {
        'deck': deck,
        'player': player,
        'dealer': dealer,
        'bet': amount
    }
    await ctx.send(f"B√†i c·ªßa b·∫°n: {format_hand(player)} (T·ªïng: {hand_value(player)})\nB√†i dealer: {format_hand([dealer[0]])} v√† [·∫©n]\nG√µ `hit` ƒë·ªÉ r√∫t, `stand` ƒë·ªÉ d·ª´ng.")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['hit', 'stand']

    while True:
        try:
            msg = await bot.wait_for('message', check=check, timeout=60)
        except:
            del active_blackjack[ctx.author.id]
            await ctx.send('‚è∞ H·∫øt th·ªùi gian! V√°n b√†i b·ªã h·ªßy.')
            return
        if msg.content.lower() == 'hit':
            player.append(draw_card(deck))
            await ctx.send(f"B·∫°n r√∫t: {format_hand([player[-1]])}. B√†i: {format_hand(player)} (T·ªïng: {hand_value(player)})")
            if hand_value(player) > 21:
                user_data['balance'] -= amount
                update_user_data(ctx.author.id, user_data)
                del active_blackjack[ctx.author.id]
                await ctx.send(f'üí• Qu√° 21! B·∫°n thua **{amount:,.2f}** xu. S·ªë d∆∞: **{user_data["balance"]:,.2f}**')
                return
        else:
            break
    # Dealer turn
    while hand_value(dealer) < 17:
        dealer.append(draw_card(deck))
    await ctx.send(f"B√†i dealer: {format_hand(dealer)} (T·ªïng: {hand_value(dealer)})")
    player_val = hand_value(player)
    dealer_val = hand_value(dealer)
    if dealer_val > 21 or player_val > dealer_val:
        user_data['balance'] += amount
        result = f'üéâ B·∫°n th·∫Øng **{amount:,.2f}** xu!'
    elif player_val == dealer_val:
        result = 'ü§ù H√≤a! Kh√¥ng m·∫•t ti·ªÅn.'
    else:
        user_data['balance'] -= amount
        result = f'üò¢ B·∫°n thua **{amount:,.2f}** xu.'
    update_user_data(ctx.author.id, user_data)
    del active_blackjack[ctx.author.id]
    await ctx.send(f'{result} S·ªë d∆∞: **{user_data["balance"]:,.2f}**')

def format_hand(hand):
    return ', '.join([f'{r}{s}' for r, s in hand])
@bot.command(name='help')
async def help(ctx):
    embed = discord.Embed(
        title="üìò H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng BOT - Zero Bot Beta 2.3",
        description="Danh s√°ch ƒë·∫ßy ƒë·ªß c√°c l·ªánh",
        color=discord.Color.blue()
    )
    
    categories = {
        "üí∞ Kinh t·∫ø": [
            "`!z daily` - Nh·∫≠n qu√† h√†ng ng√†y",
            "`!z work` - L√†m vi·ªác ki·∫øm ti·ªÅn (30p/l·∫ßn)",
            "`!z give @user <amount>` - T·∫∑ng ti·ªÅn",
            "`!z rob @user` - C∆∞·ªõp ti·ªÅn (1h/l·∫ßn)"
        ],
        "üéÆ Mini Games": [
            "`!z blackjack <amount>` - Ch∆°i x√¨ d√°ch",
            "`!z coinflip <heads/tails> <amount>` - Tung ƒë·ªìng xu",
            "`!z spin <amount>` - Quay slot",
            "`!z taixiu <tai/xiu> <amount>` - C√° c∆∞·ª£c t√†i x·ªâu"
        ],
        "üõí C·ª≠a h√†ng": [
            "`!z shop` - Xem c·ª≠a h√†ng",
            "`!z shop buy <item>` - Mua v·∫≠t ph·∫©m",
            "`!z inventory` - Xem kho ƒë·ªì"
        ],
        "üìä Kh√°c": [
            "`!z foxcoin <check/buy/sell>` - Giao d·ªãch foxcoin",
            "`!z leaderboard` - B·∫£ng x·∫øp h·∫°ng",
            "`!z love @user1 @user2` - Xem ƒë·ªô h·ª£p nhau"
        ]
    }
    
    for category, commands in categories.items():
        embed.add_field(name=category, value="\n".join(commands), inline=False)
    
    embed.set_footer(text=f"Prefix: {', '.join(PREFIXES)} | Zero Bot Beta 2.2")
    await ctx.send(embed=embed)

@bot.command(name='love', aliases=love_commands[1:])
async def love(ctx):
    mentions = ctx.message.mentions
    if len(mentions) != 2:
        await ctx.send("Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p `!z love <Ng∆∞·ªùi d√πng 1> <Ng∆∞·ªùi d√πng 2>`")
        return
    
    user1, user2 = mentions[0], mentions[1]
    user_id1, user_id2 = user1.id, user2.id
    def tong_chu_so(n):
        j = n // 10
        k = n % 10
        if j + k > 9:
            return tong_chu_so(j+k)
        return j+k
    s1, s2 = tong_chu_so(user_id1), tong_chu_so(user_id2)
    hop_nhau = (int((s1*s2)**0.5) + random.randint(0, 100)) % 100
    await ctx.send(f"T·ª∑ l·ªá h·ª£p nhau c·ªßa 2 b·∫°n l√† {hop_nhau}%")
    if hop_nhau == 100:
        await ctx.send(
            "üíç **C·∫¶N ƒê·ªÇ G·∫§P!!!!!** üíç\n"
            "V√¨ 2 b·∫°n l√† ƒë·ªãnh m·ªánh l√† c√≥ th·∫≠t! üíò Hai b·∫°n l√† c·∫∑p ƒë√¥i ho√†n h·∫£o t·ª´ t√™n ƒë·∫øn tr√°i tim! üíçüíñ Ch√∫c m·ª´ng v√¨ ƒë√£ t√¨m th·∫•y n·ª≠a kia c·ªßa m√¨nh!"
            )
    elif 99 >= hop_nhau >= 90:
        await ctx.send("M√¨nh nghƒ© 2 b·∫°n n√™n v·ªÅ chung 1 nh√† v·ªõi nhau! üè°üíë")
    elif 89 >= hop_nhau >= 80:
        await ctx.send("M·ªôt t√¨nh y√™u ƒë√°ng ng∆∞·ª°ng m·ªô! üíñ")
    elif 79 >= hop_nhau >= 70:
        await ctx.send("R·∫•t h·ª£p nhau ƒë·∫•y! Th·ª≠ t√¨m hi·ªÉu th√™m xem sao! üòä")
    elif 69 >= hop_nhau >= 50:
        await ctx.send("C≈©ng t·∫°m ·ªïn, nh∆∞ng v·∫´n c·∫ßn c·ªë g·∫Øng! ü§ù")
    elif 49 >= hop_nhau >= 30:
        await ctx.send("Hmm... C√≥ l·∫Ω ch·ªâ n√™n l√†m b·∫°n. üòÖ")
    elif 29 >= hop_nhau >= 10:
        await ctx.send("Kh√≥ ƒë·∫•y... ch·∫Øc kh√¥ng c√πng t·∫ßn s·ªë. üò¨")
    elif 9 >= hop_nhau >= 1:
        await ctx.send("üíî Oan gia tr√°i s·ªë lu√¥n r·ªìi!")
    else:
        await ctx.send("L√† do gi√° tr·ªã kh√¥ng h·ª£p l·ªá hay... **kh√¥ng h·ª£p nhau**? ü§ñ")

@bot.command(name='foxcoin', aliases=foxcoin_commands[1:])
async def foxcoin(ctx, choice: str = None, number: str = None):
    msg_khong_hop_le = 'H√£y ch·ªçn 1 trong 3 l·ª±a ch·ªçn d∆∞·ªõi ƒë√¢y:\nKi·ªÉm tra gi√° v√† s·ªë l∆∞·ª£ng foxcoin ƒëang s·ªü h·ªØu. `!z foxcoin check`\nMua foxcoin. `!z foxcoin buy <s·ªë l∆∞·ª£ng>`\nB√°n foxcoin. `!z foxcoin sell <s·ªë l∆∞·ª£ng>`'
    if choice not in ['check', 'buy', 'sell']:
        await ctx.send(msg_khong_hop_le)
        return
    user_data = get_user_data(ctx.author.id)
    foxcoin_price = get_foxcoin_price()
    if choice == 'check':
        if number is not None:
            await ctx.send(msg_khong_hop_le)
            return
        so_coin = user_data['foxcoin']
        await ctx.send(
            f'B·∫°n ƒëang c√≥ **{so_coin:,.2f}** foxcoin.\n'
            f'Ngu·ªìn cung foxcoin tr√™n th·ªã tr∆∞·ªùng hi·ªán t·∫°i l√† **{get_total_supply():,.2f}/{MAX_FOXCOIN:,.2f}**\n'
            f'Gi√° 1 foxcoin hi·ªán t·∫°i l√† **{get_foxcoin_price()}**\n'
            f'T·ªïng gi√° tr·ªã s·ªë foxcoin b·∫°n ƒëang s·ªü h·ªØu l√† **{(get_foxcoin_price() * so_coin):,.2f}**'
            )
        return
    if number.isdigit():
        number = int(number)
    else:
        if number == 'all':
            if choice in ['buy']:
                if (user_data['balance'] / foxcoin_price) + get_total_supply() <= MAX_FOXCOIN:
                    number = user_data['balance'] / foxcoin_price
                else:
                    number = MAX_FOXCOIN - get_total_supply()
            elif choice in ['sell']:
                number = user_data['foxcoin']
        else:
            await ctx.send('S·ªë ti·ªÅn b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá!')
            return        
    if number is None:
        await ctx.send(msg_khong_hop_le)
        return
    if choice == 'buy':
        if number <= 0 or number*foxcoin_price > user_data['balance']:
            await ctx.send('S·ªë foxcoin kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë d∆∞!')
            return
        if number + get_total_supply() > MAX_FOXCOIN:
            await ctx.send('S·ªë l∆∞·ª£ng foxcoin c√≥ s·∫µn tr√™n th·ªã tr∆∞·ªùng hi·ªán kh√¥ng ƒë·ªß!')
            return
        if get_total_supply() == MAX_FOXCOIN:
            await ctx.send('S·ªë l∆∞·ª£ng foxcoin ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n!')
        user_data['balance'] -= float(format(number*foxcoin_price, '.2f'))
        user_data['foxcoin'] += number
        msg = 'mua'
    elif choice == 'sell':
        if number <= 0 or number > user_data['foxcoin']:
            await ctx.send('S·ªë foxcoin kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng b·∫°n ƒëang c√≥!')
            return
        user_data['balance'] += float(format(number*foxcoin_price, '.2f'))
        user_data['foxcoin'] -= number
        msg = 'b√°n'
    update_user_data(ctx.author.id, user_data)
    await ctx.send(
        "B·∫°n ƒë√£ " + msg + ' **' + str(format(number, '.2f')) + f"** foxcoin v·ªõi t·ªïng gi√° tr·ªã giao d·ªãch l√† **{(number*foxcoin_price):,.2f}**.\n"
        f"Hi·ªán t·∫°i b·∫°n c√≥ **{user_data['foxcoin']:,.2f}** foxcoin.\n"
        f"S·ªë d∆∞: **{user_data['balance']:,.2f}**."
                       )
        
@tasks.loop(hours=1)
async def update_price():
    foxcoin_price = get_foxcoin_price()
    change_percent = random.choice([0.005, -0.005, 0.01, -0.01, 0.02, -0.02, 0.03, -0.03])
    foxcoin_price *= (1 + change_percent)
    save_foxcoin_price(round(foxcoin_price, 2))

@bot.command(name='leaderboard', aliases=leaderboard_commands[1:])
async def leaderboard(ctx):
    def bubble_sort(arr):
        for i in range(len(arr)):
            for j in range(len(arr)-i-1):
                if arr[j][1] < arr[j+1][1]:
                    arr[j], arr[j+1] = arr[j+1], arr[j]
        return arr[:10]
    
    data = load_data()
    leaderboard_list = []
    for user_id, user_data in data.items():
        leaderboard_list.append((user_id, user_data['balance'] + user_data['foxcoin']*get_foxcoin_price()))
    leaderboard_list = bubble_sort(leaderboard_list)
    embed = discord.Embed(title="üèÜ B·∫£ng x·∫øp h·∫°ng t√†i s·∫£n üèÜ", color=discord.Color.gold())
    for rank, (user_id, total_value) in enumerate(leaderboard_list, start=1):
        user = await bot.fetch_user(int(user_id))
        embed.add_field(
            name = f"{rank}. {user.name}",
            value = f"T·ªïng t√†i s·∫£n: {total_value:.2f}",
            inline = False
        )
    await ctx.send(embed=embed)

@bot.command(name='taisan')
async def taisan(ctx):
    user_data = get_user_data(ctx.author.id)
    await ctx.send(f"üí∞ {ctx.author.mention} T√†i s·∫£n c·ªßa b·∫°n g·ªìm c√≥:\n- S·ªë d∆∞: **{user_data['balance']:,.2f}**\n- Foxcoin: **{user_data['foxcoin']:,.2f}** foxcoin, tr·ªã gi√° kho·∫£ng **{user_data['foxcoin']*get_foxcoin_price():,.2f}** *({get_foxcoin_price():,.2f}/foxcoin)*\nT·ªïng t√†i s·∫£n c·ªßa b·∫°n l√†: **{user_data['balance']+user_data['foxcoin']*get_foxcoin_price():,.2f}**")

@bot.command(name='spin', aliases=spin_commands[1:])
async def spin(ctx, amount: str = None):
    if amount is None:
        await ctx.send('H√£y nh·∫≠p ƒë√∫ng c√∫ ph√°p! `!z spin <s·ªë ti·ªÅn c∆∞·ª£c>`')
        return
    user_data = get_user_data(ctx.author.id)
    if amount.isdigit():
        amount = int(amount)
        if amount <= 0 or amount > user_data['balance']:
            await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá ho·∫∑c s·ªë d∆∞ kh√¥ng ƒë·ªß!')
            return
    else:
        if amount not in ['all']:
            await ctx.send('H√£y nh·∫≠p ƒë√∫ng c√∫ ph√°p! `!z spin <s·ªë ti·ªÅn c∆∞·ª£c>`')
            return
        amount = user_data['balance']
    slots = ['üçï','üçî','üçü','üå≠','üçø','üçñ','üçó','ü•©','üç†','üçò','üç§','üçâ']
    result = random.choices(slots, k=3)
    if result[0] == result[1] == result[2]:
        msg = f"üéâ {ctx.author.mention} th·∫Øng! Nh·∫≠n **{amount:,.2f}** xu.\n"
        user_data['balance'] += amount
    else:
        msg = f"üò¢ {ctx.author.mention} thua! M·∫•t **{amount:,.2f}** xu.\n"
        user_data['balance'] -= amount
    update_user_data(ctx.author.id, user_data)
    await ctx.send('ƒêang quay s·ªë... Vui l√≤ng ƒë·ª£i!\nK·∫øt qu·∫£: **' + ' | '.join(result) + '**\n' + msg + 'S·ªë d∆∞: **' + format(user_data['balance'], ',.2f') + '**')

@bot.command(name='taixiu')
async def taixiu(ctx, choice: str = None, amount: str = None):
    if choice not in ['tai', 'xiu'] or amount is None:
        await ctx.send('C√∫ ph√°p: `!z taixiu tai/xiu <s·ªë ti·ªÅn>`')
        return
    if amount is None:
        await ctx.send('C√∫ ph√°p: `!z taixiu tai/xiu <s·ªë ti·ªÅn>`')
        return
    user_data = get_user_data(ctx.author.id)
    if amount.isdigit():
        amount = int(amount)
    else:
        if amount not in ['all']:
            await ctx.send('C√∫ ph√°p: `!z taixiu tai/xiu <s·ªë ti·ªÅn>`')
            return
        amount = user_data['balance']
    if amount <= 0 or amount > user_data['balance']:
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë d∆∞!')
        return
    result1 = random.randint(1, 6)
    result2 = random.randint(1, 6)
    result3 = random.randint(1, 6)
    total_result = result1 + result2 + result3
    if 10 >= total_result >= 4:
        if choice in ['xiu']:
            user_data['balance'] += amount
            msg = f"üéâ Ch√∫c m·ª´ng {ctx.author.mention} th·∫Øng!\nT·ªïng ƒëi·ªÉm: **{result1} + {result2} + {result3} = {total_result}**.\nK·∫øt qu·∫£: **X·ªàU**.\nNh·∫≠n **{amount:,.2f}** xu."
        else:
            user_data['balance'] -= amount
            msg = f"üò¢ R·∫•t ti·∫øc! {ctx.author.mention} thua!\nT·ªïng ƒëi·ªÉm: **{result1} + {result2} + {result3} = {total_result}**.\nK·∫øt qu·∫£: **X·ªàU**.\nM·∫•t **{amount:,.2f}** xu."
    elif 17 >= total_result >= 11:
        if choice in ['tai']:
            user_data['balance'] += amount
            msg = f"üéâ Ch√∫c m·ª´ng {ctx.author.mention} th·∫Øng!\nT·ªïng ƒëi·ªÉm: **{result1} + {result2} + {result3} = {total_result}**.\nK·∫øt qu·∫£: **T√ÄI**.\nNh·∫≠n **{amount:,.2f}** xu."
        else:
            user_data['balance'] -= amount
            msg = f"üò¢ R·∫•t ti·∫øc! {ctx.author.mention} thua!\nT·ªïng ƒëi·ªÉm: **{result1} + {result2} + {result3} = {total_result}**.\nK·∫øt qu·∫£: **T√ÄI**.\nM·∫•t **{amount:,.2f}** xu."
    else:
        msg = f"T·ªïng ƒëi·ªÉm: **{result1} + {result2} + {result3} = {total_result}**.\nK·∫øt qu·∫£: **NH√Ä C√ÅI ƒÇN**.\nKh√¥ng b·ªã m·∫•t xu."

    update_user_data(ctx.author.id, user_data)
    await ctx.send(msg + f" S·ªë d∆∞: **{user_data['balance']:,.2f}**")

@bot.command(name='pets')
async def pets(ctx, choice: str = None, pets_name: str = None):
    if choice not in ['buy', 'sell', 'feed', 'give'] or pets_name not in get_pet_list():
        await ctx.send("H√£y nh·∫≠p ƒë√∫ng c√∫ ph√°p!\n`!z pets buy/sell <t√™n pet>`\n`!z pets feed <t√™n pet>`\n`!z pets give <t√™n pet><ng∆∞·ªùi d√πng>`")
        return
    user_data = get_user_data(ctx.author.id)
    if not user_data:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng.")
        return

    if choice == 'give':
        if not ctx.message.mentions:
            await ctx.send("‚ùå B·∫°n c·∫ßn tag ng∆∞·ªùi nh·∫≠n!")
            return
        recipient = ctx.message.mentions[0]
        if recipient.id == ctx.author.id:
            await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ t·∫∑ng pet cho ch√≠nh m√¨nh!")
            return

        recipient_data = get_user_data(recipient.id)
        if not recipient_data:
            await ctx.send("‚ùå Ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu!")
            return
        if pets_name not in user_data['pets']:
            await ctx.send("‚ùå B·∫°n kh√¥ng s·ªü h·ªØu pet n√†y!")
            return

        user_data['pets'].remove(pets_name)
        recipient_data.setdefault('pets', []).append(pets_name)
        update_user_data(ctx.author.id, user_data)
        update_user_data(recipient.id, recipient_data)
        await ctx.send(f"üéÅ {ctx.author.mention} ƒë√£ t·∫∑ng pet **{pets_name}** cho {recipient.mention}!")
        return
    elif choice == 'buy':
        if user_data['balance'] < get_pet_price(pets_name):
            await ctx.send("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ mua pet n√†y!")
            return
        user_data['balance'] -= get_pet_price(pets_name)
        user_data.setdefault('pets', []).append(pets_name)
        msg = f"üéâ {ctx.author.mention} ƒë√£ mua pet **{pets_name}** v·ªõi gi√° **{get_pet_price(pets_name):,.2f}** xu!"
    elif choice == 'sell':
        if pets_name not in user_data.get('pets', []):
            await ctx.send("‚ùå B·∫°n kh√¥ng s·ªü h·ªØu pet n√†y!")
            return
        user_data['pets'].remove(pets_name)
        user_data['balance'] += get_pet_price(pets_name) * 0.8
        msg = f"üí∞ {ctx.author.mention} ƒë√£ b√°n pet **{pets_name}** v√† nh·∫≠n ƒë∆∞·ª£c **{get_pet_price(pets_name) * 0.8:,.2f}** xu!"
    elif choice == 'feed':
        if pets_name not in user_data.get('pets', []):
            await ctx.send("‚ùå B·∫°n kh√¥ng s·ªü h·ªØu pet n√†y!")
            return
        feed_cost = 50
        if user_data['balance'] < feed_cost:
            await ctx.send("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ cho ƒÉn pet n√†y!")
            return
        user_data['balance'] -= feed_cost
        msg = f"üçñ {ctx.author.mention} ƒë√£ cho pet **{pets_name}** ƒÉn v√† m·∫•t **{feed_cost:,.2f}** xu!"
    await ctx.send(msg + f' S·ªë d∆∞ hi·ªán t·∫°i: **{user_data["balance"]:,.2f}** xu.\nDanh s√°ch pet c·ªßa b·∫°n: **' + ', '.join(user_data.get('pets', [])) + "**")
    update_user_data(ctx.author.id, user_data)

@bot.command(name='info')
async def info(ctx):
    await ctx.send("""ü§ñ Gi·ªõi thi·ªáu v·ªÅ Bot

Ch√†o b·∫°n! M√¨nh l√† **Zero Bot Beta 2.2**, m·ªôt bot Discord th√¢n thi·ªán ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ gi√∫p server c·ªßa b·∫°n tr·ªü n√™n vui v·∫ª v√† th√∫ v·ªã h∆°n!

üìö D√πng l·ªánh `!z help` ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh m√† m√¨nh h·ªó tr·ª£.
üõ† Lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† c·∫£i ti·∫øn ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët nh·∫•t!

üì¨ C√≥ g√≥p √Ω hay c·∫ßn h·ªó tr·ª£? Li√™n h·ªá:
            -Discord: https://discord.gg/5UmC7yXVye
            -Email:
            -Facebook: https://www.facebook.com/profile.php?id=61578577050196""")

# --- Rob Command ---
rob_cooldowns = {}

@bot.command(name='rob', aliases=('cuop', 'trom'))
async def rob(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("C√∫ ph√°p: `!z rob @ng∆∞·ªùi_d√πng`")
        return
    
    if member.id == ctx.author.id:
        await ctx.send("B·∫°n kh√¥ng th·ªÉ t·ª± c∆∞·ªõp ch√≠nh m√¨nh!")
        return
    
    # Cooldown check (1 hour)
    now = time.time()
    last_rob = rob_cooldowns.get(ctx.author.id, 0)
    if now - last_rob < 3600:
        remaining = 3600 - (now - last_rob)
        mins = int(remaining // 60)
        await ctx.send(f"‚è≥ B·∫°n c·∫ßn ch·ªù {mins} ph√∫t n·ªØa tr∆∞·ªõc khi c∆∞·ªõp ti·∫øp!")
        return
    
    robber_data = get_user_data(ctx.author.id)
    victim_data = get_user_data(member.id)
    
    # Victim must have at least 100 coins
    if victim_data['balance'] < 100:
        await ctx.send("N·∫°n nh√¢n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ªõp!")
        return
    
    # 40% success chance
    if random.random() < 0.4:
        # Steal 10-25% of victim's balance
        steal_percent = random.uniform(0.1, 0.25)
        amount = random.randint(100, 500)
        
        victim_data['balance'] -= amount
        robber_data['balance'] += amount
        
        update_user_data(member.id, victim_data)
        update_user_data(ctx.author.id, robber_data)
        
        rob_cooldowns[ctx.author.id] = now
        await ctx.send(
            f"üí∞ {ctx.author.mention} ƒë√£ c∆∞·ªõp th√†nh c√¥ng {amount:,.2f} xu t·ª´ {member.mention}!\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i: {robber_data['balance']:,.2f} xu"
        )
    else:
        # Fine for failed robbery
        fine = min(int(robber_data['balance'] * 0.05), 5000)
        robber_data['balance'] -= fine
        update_user_data(ctx.author.id, robber_data)
        
        rob_cooldowns[ctx.author.id] = now
        await ctx.send(
            f"üö® {ctx.author.mention} ƒë√£ b·ªã b·∫Øt khi c·ªë c∆∞·ªõp {member.mention}!\n"
            f"B·∫°n b·ªã ph·∫°t {fine:,.2f} xu\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i: {robber_data['balance']:,.2f} xu"
        )

# --- Give Money Command ---
@bot.command(name='give', aliases=('gift', 'tang'))
async def give(ctx, member: discord.Member = None, amount: int = None):
    if member is None or amount is None:
        await ctx.send("C√∫ ph√°p: `!z give @ng∆∞·ªùi_d√πng <s·ªë ti·ªÅn>`")
        return
    
    if member.id == ctx.author.id:
        await ctx.send("B·∫°n kh√¥ng th·ªÉ t·ª± t·∫∑ng ti·ªÅn cho ch√≠nh m√¨nh!")
        return
    
    if amount <= 0:
        await ctx.send("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return
    
    sender_data = get_user_data(ctx.author.id)
    receiver_data = get_user_data(member.id)
    
    if sender_data['balance'] < amount:
        await ctx.send("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!")
        return
    
    # Transfer money
    sender_data['balance'] -= amount
    receiver_data['balance'] += amount
    
    update_user_data(ctx.author.id, sender_data)
    update_user_data(member.id, receiver_data)
    
    await ctx.send(
        f"üéÅ {ctx.author.mention} ƒë√£ t·∫∑ng {amount:,.2f} xu cho {member.mention}!\n"
        f"S·ªë d∆∞ c·ªßa b·∫°n c√≤n: {sender_data['balance']:,.2f} xu"
    )

# --- Inventory System ---
@bot.command(name='inventory', aliases=('inv', 'tui'))
async def inventory(ctx, member: discord.Member = None):
    target = member or ctx.author
    user_data = get_user_data(target.id)
    inventory = user_data.get('inventory', {})
    
    if not inventory:
        await ctx.send(f"{'B·∫°n' if target == ctx.author else target.display_name} ch∆∞a c√≥ v·∫≠t ph·∫©m n√†o!")
        return
    
    embed = discord.Embed(
        title=f"üéí KHO ƒê·ªí C·ª¶A {target.display_name.upper()}",
        color=discord.Color.blue()
    )
    
    for item, quantity in inventory.items():
        if item in SHOP_ITEMS:
            emoji = SHOP_ITEMS[item]['emoji']
            embed.add_field(name=f"{emoji} {item.capitalize()}", value=f"S·ªë l∆∞·ª£ng: {quantity}", inline=True)
    
    await ctx.send(embed=embed)

# --- Work System ---
@bot.command(name='work', aliases=work_commands[1:])
async def work(ctx):
    user_data = get_user_data(ctx.author.id)
    now = time.time()
    last_work = user_data.get('last_work')
    
    # 30 minutes cooldown
    if last_work and (now - last_work) < 1800:
        remaining = 1800 - (now - last_work)
        mins, secs = divmod(int(remaining), 60)
        await ctx.send(f"‚è≥ B·∫°n c·∫ßn ngh·ªâ ng∆°i! Th·ª≠ l·∫°i sau {mins} ph√∫t {secs} gi√¢y")
        return
    
    # Earn between 100-500 coins
    earnings = random.randint(100, 500)
    user_data['balance'] += earnings
    user_data['last_work'] = now
    update_user_data(ctx.author.id, user_data)
    
    jobs = ["l·∫≠p tr√¨nh", "thi·∫øt k·∫ø", "nhi·∫øp ·∫£nh", "vi·∫øt content", "d·ªãch thu·∫≠t"]
    job = random.choice(jobs)
    
    await ctx.send(
        f"üíº {ctx.author.mention} ƒë√£ l√†m c√¥ng vi·ªác **{job}** v√† ki·∫øm ƒë∆∞·ª£c **{earnings}** xu!\n"
        f"S·ªë d∆∞ hi·ªán t·∫°i: **{user_data['balance']:,.2f}** xu"
    )

# --- Shop System ---
SHOP_ITEMS = {
    "diamond": {"price": 5000, "emoji": "üíé", "description": "V·∫≠t ph·∫©m qu√Ω hi·∫øm"},
    "gold": {"price": 1000, "emoji": "ü•á", "description": "V√†ng nguy√™n ch·∫•t"},
    "potion": {"price": 300, "emoji": "üß™", "description": "Thu·ªëc h·ªìi ph·ª•c"},
    "key": {"price": 2000, "emoji": "üîë", "description": "Ch√¨a kh√≥a b√≠ m·∫≠t"}
}

@bot.command(name='shop', aliases=shop_commands[1:])
async def shop(ctx, action: str = None, item: str = None, amount: int = 1):
    if action is None:
        embed = discord.Embed(title="üõí C·ª¨A H√ÄNG V·∫¨T PH·∫®M üõí", color=discord.Color.gold())
        for item_id, details in SHOP_ITEMS.items():
            embed.add_field(
                name=f"{details['emoji']} {item_id.capitalize()} - {details['price']:,} xu",
                value=details['description'],
                inline=False
            )
        embed.set_footer(text="S·ª≠ d·ª•ng !z shop buy <t√™n v·∫≠t ph·∫©m> [s·ªë l∆∞·ª£ng] ƒë·ªÉ mua")
        await ctx.send(embed=embed)
        return
    
    if action == "buy":
        if item is None:
            await ctx.send("Vui l√≤ng ch·ªçn v·∫≠t ph·∫©m! V√≠ d·ª•: `!z shop buy diamond`")
            return
        
        item = item.lower()
        if item not in SHOP_ITEMS:
            await ctx.send("V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng!")
            return
        
        user_data = get_user_data(ctx.author.id)
        item_price = SHOP_ITEMS[item]["price"] * amount
        
        if user_data['balance'] < item_price:
            await ctx.send(f"S·ªë d∆∞ kh√¥ng ƒë·ªß! B·∫°n c·∫ßn th√™m {item_price - user_data['balance']:,.2f} xu")
            return
        
        # Update inventory
        inventory = user_data.get('inventory', {})
        inventory[item] = inventory.get(item, 0) + amount
        user_data['inventory'] = inventory
        user_data['balance'] -= item_price
        
        update_user_data(ctx.author.id, user_data)
        await ctx.send(
            f"üéâ {ctx.author.mention} ƒë√£ mua {amount} {SHOP_ITEMS[item]['emoji']} {item} "
            f"v·ªõi gi√° {item_price:,.2f} xu!\n"
            f"S·ªë d∆∞ c√≤n l·∫°i: {user_data['balance']:,.2f} xu"
        )
    
    elif action == "sell":
        # Similar implementation to buy
        pass

@bot.command(name="dish")
async def hom_nay_an_gi(ctx):
    dishes = [
    "m√¨", "c∆°m", "b√∫n", "c√¢y", "roi", "th·ªãt heo", "th·ªãt b√≤", "th·ªãt b√≤ Kobe", "ƒë·∫•m", 
    "ph·ªü", "ch√°o", "h·ªß ti·∫øu", "b√°nh m√¨", "b√°nh cu·ªën",
    "g√† r√°n", "v·ªãt quay", "nem r√°n", "b√°nh x√®o", "b√°nh tr√°ng tr·ªôn",
    "tr√† ƒë√°", "sinh t·ªë b∆°", "ch√® ba m√†u",
    "l·∫©u th√°i", "l·∫©u b√≤", "l·∫©u c√°", "m√¨ cay c·∫•p ƒë·ªô 7", 
    "c∆°m t·∫•m", "c∆°m g√† x·ªëi m·ª°", "c∆°m chi√™n d∆∞∆°ng ch√¢u", "b√∫n b√≤ Hu·∫ø",
    "c√† ri g√†", "g·ªèi cu·ªën", "b√≤ l√∫c l·∫Øc", "ch√¢n g√† n∆∞·ªõng", 
    "n·ªôm b√≤ kh√¥", "x√∫c x√≠ch n∆∞·ªõng", "k·∫πo m√∫t", "k·∫πo cao su",
    "c∆°m chan n∆∞·ªõc m·∫Øt", "gan ng·ªóng"]

    drinks = [ "tr√† s·ªØa", "n∆∞·ªõc l·ªçc", "c√† ph√™ s·ªØa", "c√† ph√™ ƒëen", "tr√† ƒë√†o", "tr√† chanh", "sinh t·ªë b∆°", "sinh t·ªë xo√†i", "n∆∞·ªõc cam", "n∆∞·ªõc √©p d·ª©a", "soda chanh", "coca cola", "pepsi", "s·ªØa t∆∞∆°i", "s·ªØa ƒë·∫≠u n√†nh", "matcha latte", "tr√† √¥ long", "n∆∞·ªõc d·ª´a", "s√¢m b√≠ ƒëao", "n∆∞·ªõc m√≠a"]
    
    a = random.choices([1, 2, 3], weights=[0.4, 0.4, 0.2], k=1)[0]
    if a == 1:
        await ctx.send(f"M√¨nh nghƒ© h√¥m nay b·∫°n n√™n ƒÉn {random.choice(dishes)}")
    elif a == 2:
        await ctx.send(f"M√¨nh nghƒ© h√¥m nay b·∫°n n√™n u·ªëng {random.choice(drinks)} thay c∆°m")
    else:
        await ctx.send(f"M√¨nh nghƒ© h√¥m nay b·∫°n n√™n nh·ªãn ƒë√≥i!")

@tasks.loop(hours=24)
async def update_server_list():
    with open("server_list.txt", "w") as f:
        for guild in bot.guilds:
            f.writelines(f"Name: {guild.name}; ID: {guild.id}\n")

@bot.event
async def on_ready(): 
    update_price.start()
    update_server_list.start()

# --- Ghi Log ---

# --- R·ªùi server ---
@bot.event
async def on_member_remove(member):
    guild = member.guild
    logger = get_logger(guild.id)
    logger.info(f"[LEAVE] {member} ƒë√£ r·ªùi kh·ªèi server.")

# --- Tham gia server ---
@bot.event
async def on_member_join(member):
    guild = member.guild
    logger = get_logger(guild.id)

    logger.info(f"[JOIN] {member} (ID: {member.id}) ƒë√£ tham gia server.")

# --- Tin nh·∫Øn b·ªã xo√° ---
@bot.event
async def on_message_delete(message):
    if message.guild and not message.author.bot:
        logger = get_logger(message.guild.id)
        logger.info(f"[DELETE] {message.author} in #{message.channel}: {message.content}")

# --- L·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng ---
@bot.event
async def on_command(ctx):
    guild = ctx.guild
    if guild:
        logger = get_logger(guild.id)
        logger.info(f"[COMMAND] {ctx.author} d√πng l·ªánh: {ctx.message.content}")

# --- Ch·ªânh s·ª≠a tin nh·∫Øn ---
@bot.event
async def on_message_edit(before, after):
    if before.guild and not before.author.bot and before.content != after.content:
        logger = get_logger(before.guild.id)
        logger.info(f"[EDIT] {before.author} in #{before.channel}:\n\t- Tr∆∞·ªõc: {before.content}\n\t- Sau: {after.content}")

# --- Ban ---
@bot.event
async def on_member_ban(guild, user):
    logger = get_logger(guild.id)
    logger.info(f"[BAN] {user} ({user.id}) ƒë√£ b·ªã ban kh·ªèi server.")

# --- Unban ---
@bot.event
async def on_member_unban(guild, user):
    logger = get_logger(guild.id)
    logger.info(f"[UNBAN] {user} ({user.id}) ƒë√£ ƒë∆∞·ª£c unban.")

# --- Role thay ƒë·ªïi ---
@bot.event
async def on_member_update(before, after):
    if before.roles != after.roles:
        logger = get_logger(before.guild.id)
        added_roles = [r.name for r in after.roles if r not in before.roles]
        removed_roles = [r.name for r in before.roles if r not in after.roles]

        if added_roles:
            logger.info(f"[ROLE ADDED] {after} ƒë∆∞·ª£c th√™m role: {', '.join(added_roles)}")
        if removed_roles:
            logger.info(f"[ROLE REMOVED] {after} b·ªã g·ª° role: {', '.join(removed_roles)}")

# --- Run Bot ---
if __name__ == '__main__':
    dotenv.load_dotenv()
    bot_discord_password = os.getenv("BOT_DISCORD_PASSWORD")
    password = input('Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ kh·ªüi ƒë·ªông bot: ')
    if password == bot_discord_password:
        for _ in range(3):
            for i in range(1, 4):
                print('Bot ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông', '.' * i, end='\r')
                time.sleep(0.5)
            print(" " * 50, end='\r')
        print('Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.')
        bot.run(TOKEN)
        print('Bot ƒë√£ offline')
    else:
        print('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.')
        quit()